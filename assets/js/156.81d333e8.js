(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{650:function(t,a,s){"use strict";s.r(a);var n=s(30),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"函数柯里化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数柯里化"}},[t._v("#")]),t._v(" 函数柯里化")]),t._v(" "),s("h2",{attrs:{id:"什么是柯里化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是柯里化"}},[t._v("#")]),t._v(" 什么是柯里化")]),t._v(" "),s("p",[t._v("柯里化是一种把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。")]),t._v(" "),s("p",[t._v("这是"),s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96",target:"_blank",rel:"noopener noreferrer"}},[t._v("维基百科"),s("OutboundLink")],1),t._v("的说法")]),t._v(" "),s("p",[t._v("是不是有点难理解，有点绕， 我们用代码例子说明下，比如：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("这个"),s("code",[t._v("add(1, 2, 3)")]),t._v("函数接收三个参数， 把"),s("code",[t._v("add")]),t._v("转成"),s("code",[t._v("柯里化函数")]),t._v("呢，就是把它转成可以 "),s("code",[t._v("add(1)(2)(3)")]),t._v("，或者"),s("code",[t._v("add(1, 2)(3)")]),t._v("这样来调用")]),t._v(" "),s("p",[t._v("简单来说，柯里化是一种把一个 "),s("code",[t._v("n个参数")]),t._v("函数，转成可以把"),s("code",[t._v("参数分开调用")]),t._v("的多个函数，每调用一次会"),s("code",[t._v("返回一个新的函数")]),t._v("，直到你调用的参数达到"),s("code",[t._v("n")]),t._v("个")]),t._v(" "),s("h2",{attrs:{id:"为什么要柯里化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要柯里化"}},[t._v("#")]),t._v(" 为什么要柯里化")]),t._v(" "),s("p",[t._v("上面说到柯里化就是把一个 "),s("code",[t._v("n个参数")]),t._v("函数，转成可以把"),s("code",[t._v("参数分开调用")]),t._v("的多个函数，那我明明可以一次调用完就可以了，你还转这么多次调用，这么麻烦，有什么好处。")]),t._v(" "),s("ul",[s("li",[t._v("减少代码的冗余")]),t._v(" "),s("li",[t._v("增加代码可读性")])]),t._v(" "),s("h2",{attrs:{id:"柯里化函数的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#柯里化函数的实现"}},[t._v("#")]),t._v(" 柯里化函数的实现")]),t._v(" "),s("p",[t._v("我们来分析下：")]),t._v(" "),s("p",[s("code",[t._v("add(1)(2)(3)")]),t._v(" 这种写法， 我们拆开来看 先执行 "),s("code",[t._v("add(1)")]),t._v(", 是不是应该返回一个函数，因为后面还有 "),s("code",[t._v("(2)")]),t._v(", 执行完 "),s("code",[t._v("(2)")]),t._v(", 是不是还得返回一个函数，因为后面还有个 "),s("code",[t._v("(3)")]),t._v(", 那这个 "),s("code",[t._v("add(1)(2)(3)")]),t._v(" 是不是调用了三次函数，前面执行"),s("code",[t._v("(1)(2)")]),t._v("都是返回一个函数，最后一次"),s("code",[t._v("(3)")]),t._v("才是返回结果")]),t._v(" "),s("p",[t._v("以此类推，如果有n个参数，那么是不是调用前面"),s("code",[t._v("n - 1")]),t._v(" 次，都是返回函数， 最后一次才是返回最终结果。")]),t._v(" "),s("p",[t._v("我们还可以知道， 调用一个函数，返回结果是一个函数，多次调用，还是返回一个函数， 这样子的写法，是不是有点递归的样子。")]),t._v(" "),s("p",[t._v("你猜对了，柯里化函数的实现，其实它也就是用到了递归的写法。")])])}),[],!1,null,null,null);a.default=e.exports}}]);